# Define the stages of the pipeline. Jobs in earlier stages run before jobs in later stages.
stages:
  - test
  - publish
  - deploy

# Define when pipelines should run to avoid wasting resources. 
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'web' # Allows manual runs

# Default settings applied to all jobs
default:
  interruptible: true # Allows newer pipelines to cancel older, redundant ones on the same branch.

.backend-base:
  before_script:
    - cd Backend/stage
    - chmod +x mvnw  
  after_script:
    - cd ..
.frontend-base:
  before_script:
    - cd Frontend
  after_script:
    - cd ..


backend-test:
  stage: test
  extends: .backend-base
  image: eclipse-temurin:17-jdk-jammy 
  services:
    # This starts a temporary PostgreSQL database just for this job.
    - name: postgres:15-alpine
      alias: postgres_db
  variables:
    # These variables are passed to the Spring Boot application during the test run.
    SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres_db:5432/myapp"
    SPRING_DATASOURCE_USERNAME: "myuser"
    SPRING_DATASOURCE_PASSWORD: "mypassword"
    POSTGRES_DB: "myapp" # Variables for the postgres service itself
    POSTGRES_USER: "myuser"
    POSTGRES_PASSWORD: "mypassword"
  script:
    - ./mvnw test
  cache: # Cache Maven dependencies to speed up subsequent runs
    key: "
      files:
        - Backend/stage/pom.xml
    paths:
      - Backend/stage/.m2/repository
    policy: pull-push 


frontend-lint:
  stage: test
  extends: .frontend-base
  image: node:20-alpine # Use a Node.js image
  script:
    - npm install
    - npm run lint # Run the lint command defined in package.json
  cache: # Cache node_modules to speed up subsequent runs
    key: 
      files:
        - Frontend/package-lock.json
    paths:
      - Frontend/node_modules/
    policy: pull-push



# --- PUBLISH STAGE ---

# Template for publishing Docker images using Kaniko (secure & daemonless)
.publish-kaniko-template:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    # Create the Kaniko config file for authentication
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # Build and push the image with the commit SHA tag
    - >-
      /kaniko/executor
      --context "${CONTEXT_DIR}"
      --dockerfile "${DOCKERFILE_PATH}"
      --destination "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    # Tag and push 'latest' ONLY if we are on the default branch (e.g., 'main')
    - |
      if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then
        /kaniko/executor --context "${CONTEXT_DIR}" --dockerfile "${DOCKERFILE_PATH}" --destination "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest"
      fi

backend-publish:
  extends: .publish-kaniko-template
  needs: [backend-test]
  variables:
    CONTEXT_DIR: "$CI_PROJECT_DIR/Backend/stage"
    DOCKERFILE_PATH: "$CI_PROJECT_DIR/Backend/stage/Dockerfile"
    IMAGE_NAME: "backend"


frontend-publish:
  extends: .publish-kaniko-template
  needs: [frontend-lint]
  variables:
    CONTEXT_DIR: "$CI_PROJECT_DIR/Frontend"
    DOCKERFILE_PATH: "$CI_PROJECT_DIR/Frontend/Dockerfile"
    IMAGE_NAME: "frontend"


# ==============================================
# = Publish docker images using dind service =
# ==============================================

#backend-publish:
#  stage: publish
#  image: docker:20.10.16 
#  services:
#    - docker:20.10.16-dind 
#  needs: [backend-test] 
#  before_script:
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#  script:
#    - docker build -t "$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA" -f Backend/stage/Dockerfile Backend/stage
#    - docker push "$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA"
#    - docker tag "$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE/backend:latest"
#    - docker push "$CI_REGISTRY_IMAGE/backend:latest"



#frontend-publish:
#  stage: publish
#  image: docker:20.10.16
#  services:
#    - docker:20.10.16-dind
#  needs: [frontend-lint]
#  before_script:
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#  script:
#    - docker build -t "$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA" -f Frontend/Dockerfile Frontend
#    - docker push "$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA"
#    - docker tag "$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE/frontend:latest"
#    - docker push "$CI_REGISTRY_IMAGE/frontend:latest"


# ==============================================
# = We removed the build stage as it is not needed 
#thanks to the multi stage build used in dockerfile
# ==============================================

# Job to build the frontend application.
# This runs in the 'build' stage.
# frontend-build:
#   stage: build
#   image: node:18-alpine
#   needs: [frontend-lint] # This job runs only if frontend-lint succeeds
#   script:
#     - cd Frontend
#     - npm install
#     - npm run build # Build the Next.js application
#   artifacts:
#     # Save the build output to be used by the publish job.
#     paths:
#       - Frontend/.next/
#     expire_in: 1 hour
#   cache: # Use the same cache as the lint job
#     key: "$CI_COMMIT_REF_SLUG-npm-frontend"
#     paths:
#       - Frontend/node_modules/
#     policy: pull
   

# Job to build the backend JAR file.
# This runs in the 'build' stage.
#backend-build:
#  stage: build
#  image: eclipse-temurin:17-jdk-jammy # Use a Java 17 image
#  needs: [backend-test] # This job runs only if backend-test succeeds
#  script:
#    - cd Backend/stage
#    # The 'package' command creates the JAR file. We skip tests because they ran in the 'test' stage.
#    - ./mvnw package -DskipTests
#  artifacts:
#    # This tells GitLab to save the 'target' folder after the job is done.
#    # The JAR file inside will be available to later stages.
#    paths:
#      - Backend/stage/target/*.jar
#    expire_in: 1 hour # Keep artifacts for 1 hour
#  cache: # Use the same cache as the test job
#    key: "$CI_COMMIT_REF_SLUG-maven-backend"
#    paths:
#      - Backend/stage/.m2/repository
#    policy: pull # Only pull the cache, don't push, as the build job doesn't add new dependencies   